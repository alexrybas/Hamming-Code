using NUnit.Framework;
using System;
using System.Text;
using CodeWarsLibrary;

[TestFixture]
public class ShouldPassAllOfThese
{
    [Test]
    public void Testing1EncodeFunction()
    {
        Assert.AreEqual("000111111000111000000000000111111000000111000111000111111111111000000111", CodeWars.Encode("hey"));
        Assert.AreEqualodeWars.Encode("The Sensei told me that i can do this kata"));
        Assert.AreEqual("000111000111000111000000000000111111000000111111000111111111000000111111000111111111000111000000", CodeWars.Encode("T3st"));
        Assert.AreEqual("000111000111000111000000000000111111111111111111000111111111000000111111000111111111000111000000000000111000000000000111000000111000000111000111", CodeWars.Encode("T?st!%"));
    }
    [Test]
    public void Testing2DecodeFunction()
    {
        Assert.AreEqual("hey", CodeWars.Decode("100111111000111001000010000111111000000111001111000111110110111000010111"));
        Assert.AreEqual("The Sensei told me that i can do this kata", CodeWars.Decode
        Assert.AreEqual("T3st", CodeWars.Decode("000111000111000111000001000000111111000000111111000111111111000000111011000111111111000111000000"));
        Assert.AreEqual("T?st!%", CodeWars.Decode("000111000111000111000010000000111111111111011111000111111111000000111111000111101111000111000000000000111000000000000111000000111000000111000111"));
    }
}